// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/19/2023 00:28:02"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    exp3_2
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module exp3_2_vlg_sample_tst(
	X,
	Y,
	clk,
	sampler_tx
);
input [8:0] X;
input [8:0] Y;
input  clk;
output sampler_tx;

reg sample;
time current_time;
always @(X or Y or clk)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module exp3_2_vlg_check_tst (
	a,
	ans,
	b,
	c,
	hassetnum,
	sampler_rx
);
input [7:0] a;
input [16:0] ans;
input [7:0] b;
input [7:0] c;
input  hassetnum;
input sampler_rx;

reg [7:0] a_expected;
reg [16:0] ans_expected;
reg [7:0] b_expected;
reg [7:0] c_expected;
reg  hassetnum_expected;

reg [7:0] a_prev;
reg [16:0] ans_prev;
reg [7:0] b_prev;
reg [7:0] c_prev;
reg  hassetnum_prev;

reg [7:0] a_expected_prev;
reg [16:0] ans_expected_prev;
reg [7:0] b_expected_prev;
reg [7:0] c_expected_prev;
reg  hassetnum_expected_prev;

reg [7:0] last_a_exp;
reg [16:0] last_ans_exp;
reg [7:0] last_b_exp;
reg [7:0] last_c_exp;
reg  last_hassetnum_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:5] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 5'b1;
end

// update real /o prevs

always @(trigger)
begin
	a_prev = a;
	ans_prev = ans;
	b_prev = b;
	c_prev = c;
	hassetnum_prev = hassetnum;
end

// update expected /o prevs

always @(trigger)
begin
	a_expected_prev = a_expected;
	ans_expected_prev = ans_expected;
	b_expected_prev = b_expected;
	c_expected_prev = c_expected;
	hassetnum_expected_prev = hassetnum_expected;
end


// expected a[ 7 ]
initial
begin
	a_expected[7] = 1'bX;
end 
// expected a[ 6 ]
initial
begin
	a_expected[6] = 1'bX;
end 
// expected a[ 5 ]
initial
begin
	a_expected[5] = 1'bX;
end 
// expected a[ 4 ]
initial
begin
	a_expected[4] = 1'bX;
end 
// expected a[ 3 ]
initial
begin
	a_expected[3] = 1'bX;
end 
// expected a[ 2 ]
initial
begin
	a_expected[2] = 1'bX;
end 
// expected a[ 1 ]
initial
begin
	a_expected[1] = 1'bX;
end 
// expected a[ 0 ]
initial
begin
	a_expected[0] = 1'bX;
end 
// expected ans[ 16 ]
initial
begin
	ans_expected[16] = 1'bX;
end 
// expected ans[ 15 ]
initial
begin
	ans_expected[15] = 1'bX;
end 
// expected ans[ 14 ]
initial
begin
	ans_expected[14] = 1'bX;
end 
// expected ans[ 13 ]
initial
begin
	ans_expected[13] = 1'bX;
end 
// expected ans[ 12 ]
initial
begin
	ans_expected[12] = 1'bX;
end 
// expected ans[ 11 ]
initial
begin
	ans_expected[11] = 1'bX;
end 
// expected ans[ 10 ]
initial
begin
	ans_expected[10] = 1'bX;
end 
// expected ans[ 9 ]
initial
begin
	ans_expected[9] = 1'bX;
end 
// expected ans[ 8 ]
initial
begin
	ans_expected[8] = 1'bX;
end 
// expected ans[ 7 ]
initial
begin
	ans_expected[7] = 1'bX;
end 
// expected ans[ 6 ]
initial
begin
	ans_expected[6] = 1'bX;
end 
// expected ans[ 5 ]
initial
begin
	ans_expected[5] = 1'bX;
end 
// expected ans[ 4 ]
initial
begin
	ans_expected[4] = 1'bX;
end 
// expected ans[ 3 ]
initial
begin
	ans_expected[3] = 1'bX;
end 
// expected ans[ 2 ]
initial
begin
	ans_expected[2] = 1'bX;
end 
// expected ans[ 1 ]
initial
begin
	ans_expected[1] = 1'bX;
end 
// expected ans[ 0 ]
initial
begin
	ans_expected[0] = 1'bX;
end 
// expected b[ 7 ]
initial
begin
	b_expected[7] = 1'bX;
end 
// expected b[ 6 ]
initial
begin
	b_expected[6] = 1'bX;
end 
// expected b[ 5 ]
initial
begin
	b_expected[5] = 1'bX;
end 
// expected b[ 4 ]
initial
begin
	b_expected[4] = 1'bX;
end 
// expected b[ 3 ]
initial
begin
	b_expected[3] = 1'bX;
end 
// expected b[ 2 ]
initial
begin
	b_expected[2] = 1'bX;
end 
// expected b[ 1 ]
initial
begin
	b_expected[1] = 1'bX;
end 
// expected b[ 0 ]
initial
begin
	b_expected[0] = 1'bX;
end 
// expected c[ 7 ]
initial
begin
	c_expected[7] = 1'bX;
end 
// expected c[ 6 ]
initial
begin
	c_expected[6] = 1'bX;
end 
// expected c[ 5 ]
initial
begin
	c_expected[5] = 1'bX;
end 
// expected c[ 4 ]
initial
begin
	c_expected[4] = 1'bX;
end 
// expected c[ 3 ]
initial
begin
	c_expected[3] = 1'bX;
end 
// expected c[ 2 ]
initial
begin
	c_expected[2] = 1'bX;
end 
// expected c[ 1 ]
initial
begin
	c_expected[1] = 1'bX;
end 
// expected c[ 0 ]
initial
begin
	c_expected[0] = 1'bX;
end 

// expected hassetnum
initial
begin
	hassetnum_expected = 1'bX;
end 
// generate trigger
always @(a_expected or a or ans_expected or ans or b_expected or b or c_expected or c or hassetnum_expected or hassetnum)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected a = %b | expected ans = %b | expected b = %b | expected c = %b | expected hassetnum = %b | ",a_expected_prev,ans_expected_prev,b_expected_prev,c_expected_prev,hassetnum_expected_prev);
	$display("| real a = %b | real ans = %b | real b = %b | real c = %b | real hassetnum = %b | ",a_prev,ans_prev,b_prev,c_prev,hassetnum_prev);
`endif
	if (
		( a_expected_prev[0] !== 1'bx ) && ( a_prev[0] !== a_expected_prev[0] )
		&& ((a_expected_prev[0] !== last_a_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port a[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", a_expected_prev);
		$display ("     Real value = %b", a_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_a_exp[0] = a_expected_prev[0];
	end
	if (
		( a_expected_prev[1] !== 1'bx ) && ( a_prev[1] !== a_expected_prev[1] )
		&& ((a_expected_prev[1] !== last_a_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port a[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", a_expected_prev);
		$display ("     Real value = %b", a_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_a_exp[1] = a_expected_prev[1];
	end
	if (
		( a_expected_prev[2] !== 1'bx ) && ( a_prev[2] !== a_expected_prev[2] )
		&& ((a_expected_prev[2] !== last_a_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port a[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", a_expected_prev);
		$display ("     Real value = %b", a_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_a_exp[2] = a_expected_prev[2];
	end
	if (
		( a_expected_prev[3] !== 1'bx ) && ( a_prev[3] !== a_expected_prev[3] )
		&& ((a_expected_prev[3] !== last_a_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port a[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", a_expected_prev);
		$display ("     Real value = %b", a_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_a_exp[3] = a_expected_prev[3];
	end
	if (
		( a_expected_prev[4] !== 1'bx ) && ( a_prev[4] !== a_expected_prev[4] )
		&& ((a_expected_prev[4] !== last_a_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port a[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", a_expected_prev);
		$display ("     Real value = %b", a_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_a_exp[4] = a_expected_prev[4];
	end
	if (
		( a_expected_prev[5] !== 1'bx ) && ( a_prev[5] !== a_expected_prev[5] )
		&& ((a_expected_prev[5] !== last_a_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port a[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", a_expected_prev);
		$display ("     Real value = %b", a_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_a_exp[5] = a_expected_prev[5];
	end
	if (
		( a_expected_prev[6] !== 1'bx ) && ( a_prev[6] !== a_expected_prev[6] )
		&& ((a_expected_prev[6] !== last_a_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port a[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", a_expected_prev);
		$display ("     Real value = %b", a_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_a_exp[6] = a_expected_prev[6];
	end
	if (
		( a_expected_prev[7] !== 1'bx ) && ( a_prev[7] !== a_expected_prev[7] )
		&& ((a_expected_prev[7] !== last_a_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port a[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", a_expected_prev);
		$display ("     Real value = %b", a_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_a_exp[7] = a_expected_prev[7];
	end
	if (
		( ans_expected_prev[0] !== 1'bx ) && ( ans_prev[0] !== ans_expected_prev[0] )
		&& ((ans_expected_prev[0] !== last_ans_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ans[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ans_expected_prev);
		$display ("     Real value = %b", ans_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ans_exp[0] = ans_expected_prev[0];
	end
	if (
		( ans_expected_prev[1] !== 1'bx ) && ( ans_prev[1] !== ans_expected_prev[1] )
		&& ((ans_expected_prev[1] !== last_ans_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ans[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ans_expected_prev);
		$display ("     Real value = %b", ans_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ans_exp[1] = ans_expected_prev[1];
	end
	if (
		( ans_expected_prev[2] !== 1'bx ) && ( ans_prev[2] !== ans_expected_prev[2] )
		&& ((ans_expected_prev[2] !== last_ans_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ans[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ans_expected_prev);
		$display ("     Real value = %b", ans_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ans_exp[2] = ans_expected_prev[2];
	end
	if (
		( ans_expected_prev[3] !== 1'bx ) && ( ans_prev[3] !== ans_expected_prev[3] )
		&& ((ans_expected_prev[3] !== last_ans_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ans[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ans_expected_prev);
		$display ("     Real value = %b", ans_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ans_exp[3] = ans_expected_prev[3];
	end
	if (
		( ans_expected_prev[4] !== 1'bx ) && ( ans_prev[4] !== ans_expected_prev[4] )
		&& ((ans_expected_prev[4] !== last_ans_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ans[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ans_expected_prev);
		$display ("     Real value = %b", ans_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ans_exp[4] = ans_expected_prev[4];
	end
	if (
		( ans_expected_prev[5] !== 1'bx ) && ( ans_prev[5] !== ans_expected_prev[5] )
		&& ((ans_expected_prev[5] !== last_ans_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ans[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ans_expected_prev);
		$display ("     Real value = %b", ans_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ans_exp[5] = ans_expected_prev[5];
	end
	if (
		( ans_expected_prev[6] !== 1'bx ) && ( ans_prev[6] !== ans_expected_prev[6] )
		&& ((ans_expected_prev[6] !== last_ans_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ans[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ans_expected_prev);
		$display ("     Real value = %b", ans_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ans_exp[6] = ans_expected_prev[6];
	end
	if (
		( ans_expected_prev[7] !== 1'bx ) && ( ans_prev[7] !== ans_expected_prev[7] )
		&& ((ans_expected_prev[7] !== last_ans_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ans[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ans_expected_prev);
		$display ("     Real value = %b", ans_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ans_exp[7] = ans_expected_prev[7];
	end
	if (
		( ans_expected_prev[8] !== 1'bx ) && ( ans_prev[8] !== ans_expected_prev[8] )
		&& ((ans_expected_prev[8] !== last_ans_exp[8]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ans[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ans_expected_prev);
		$display ("     Real value = %b", ans_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ans_exp[8] = ans_expected_prev[8];
	end
	if (
		( ans_expected_prev[9] !== 1'bx ) && ( ans_prev[9] !== ans_expected_prev[9] )
		&& ((ans_expected_prev[9] !== last_ans_exp[9]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ans[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ans_expected_prev);
		$display ("     Real value = %b", ans_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ans_exp[9] = ans_expected_prev[9];
	end
	if (
		( ans_expected_prev[10] !== 1'bx ) && ( ans_prev[10] !== ans_expected_prev[10] )
		&& ((ans_expected_prev[10] !== last_ans_exp[10]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ans[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ans_expected_prev);
		$display ("     Real value = %b", ans_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ans_exp[10] = ans_expected_prev[10];
	end
	if (
		( ans_expected_prev[11] !== 1'bx ) && ( ans_prev[11] !== ans_expected_prev[11] )
		&& ((ans_expected_prev[11] !== last_ans_exp[11]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ans[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ans_expected_prev);
		$display ("     Real value = %b", ans_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ans_exp[11] = ans_expected_prev[11];
	end
	if (
		( ans_expected_prev[12] !== 1'bx ) && ( ans_prev[12] !== ans_expected_prev[12] )
		&& ((ans_expected_prev[12] !== last_ans_exp[12]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ans[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ans_expected_prev);
		$display ("     Real value = %b", ans_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ans_exp[12] = ans_expected_prev[12];
	end
	if (
		( ans_expected_prev[13] !== 1'bx ) && ( ans_prev[13] !== ans_expected_prev[13] )
		&& ((ans_expected_prev[13] !== last_ans_exp[13]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ans[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ans_expected_prev);
		$display ("     Real value = %b", ans_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ans_exp[13] = ans_expected_prev[13];
	end
	if (
		( ans_expected_prev[14] !== 1'bx ) && ( ans_prev[14] !== ans_expected_prev[14] )
		&& ((ans_expected_prev[14] !== last_ans_exp[14]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ans[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ans_expected_prev);
		$display ("     Real value = %b", ans_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ans_exp[14] = ans_expected_prev[14];
	end
	if (
		( ans_expected_prev[15] !== 1'bx ) && ( ans_prev[15] !== ans_expected_prev[15] )
		&& ((ans_expected_prev[15] !== last_ans_exp[15]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ans[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ans_expected_prev);
		$display ("     Real value = %b", ans_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ans_exp[15] = ans_expected_prev[15];
	end
	if (
		( ans_expected_prev[16] !== 1'bx ) && ( ans_prev[16] !== ans_expected_prev[16] )
		&& ((ans_expected_prev[16] !== last_ans_exp[16]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ans[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ans_expected_prev);
		$display ("     Real value = %b", ans_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ans_exp[16] = ans_expected_prev[16];
	end
	if (
		( b_expected_prev[0] !== 1'bx ) && ( b_prev[0] !== b_expected_prev[0] )
		&& ((b_expected_prev[0] !== last_b_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port b[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", b_expected_prev);
		$display ("     Real value = %b", b_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_b_exp[0] = b_expected_prev[0];
	end
	if (
		( b_expected_prev[1] !== 1'bx ) && ( b_prev[1] !== b_expected_prev[1] )
		&& ((b_expected_prev[1] !== last_b_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port b[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", b_expected_prev);
		$display ("     Real value = %b", b_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_b_exp[1] = b_expected_prev[1];
	end
	if (
		( b_expected_prev[2] !== 1'bx ) && ( b_prev[2] !== b_expected_prev[2] )
		&& ((b_expected_prev[2] !== last_b_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port b[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", b_expected_prev);
		$display ("     Real value = %b", b_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_b_exp[2] = b_expected_prev[2];
	end
	if (
		( b_expected_prev[3] !== 1'bx ) && ( b_prev[3] !== b_expected_prev[3] )
		&& ((b_expected_prev[3] !== last_b_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port b[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", b_expected_prev);
		$display ("     Real value = %b", b_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_b_exp[3] = b_expected_prev[3];
	end
	if (
		( b_expected_prev[4] !== 1'bx ) && ( b_prev[4] !== b_expected_prev[4] )
		&& ((b_expected_prev[4] !== last_b_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port b[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", b_expected_prev);
		$display ("     Real value = %b", b_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_b_exp[4] = b_expected_prev[4];
	end
	if (
		( b_expected_prev[5] !== 1'bx ) && ( b_prev[5] !== b_expected_prev[5] )
		&& ((b_expected_prev[5] !== last_b_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port b[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", b_expected_prev);
		$display ("     Real value = %b", b_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_b_exp[5] = b_expected_prev[5];
	end
	if (
		( b_expected_prev[6] !== 1'bx ) && ( b_prev[6] !== b_expected_prev[6] )
		&& ((b_expected_prev[6] !== last_b_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port b[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", b_expected_prev);
		$display ("     Real value = %b", b_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_b_exp[6] = b_expected_prev[6];
	end
	if (
		( b_expected_prev[7] !== 1'bx ) && ( b_prev[7] !== b_expected_prev[7] )
		&& ((b_expected_prev[7] !== last_b_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port b[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", b_expected_prev);
		$display ("     Real value = %b", b_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_b_exp[7] = b_expected_prev[7];
	end
	if (
		( c_expected_prev[0] !== 1'bx ) && ( c_prev[0] !== c_expected_prev[0] )
		&& ((c_expected_prev[0] !== last_c_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c_expected_prev);
		$display ("     Real value = %b", c_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_c_exp[0] = c_expected_prev[0];
	end
	if (
		( c_expected_prev[1] !== 1'bx ) && ( c_prev[1] !== c_expected_prev[1] )
		&& ((c_expected_prev[1] !== last_c_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c_expected_prev);
		$display ("     Real value = %b", c_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_c_exp[1] = c_expected_prev[1];
	end
	if (
		( c_expected_prev[2] !== 1'bx ) && ( c_prev[2] !== c_expected_prev[2] )
		&& ((c_expected_prev[2] !== last_c_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c_expected_prev);
		$display ("     Real value = %b", c_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_c_exp[2] = c_expected_prev[2];
	end
	if (
		( c_expected_prev[3] !== 1'bx ) && ( c_prev[3] !== c_expected_prev[3] )
		&& ((c_expected_prev[3] !== last_c_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c_expected_prev);
		$display ("     Real value = %b", c_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_c_exp[3] = c_expected_prev[3];
	end
	if (
		( c_expected_prev[4] !== 1'bx ) && ( c_prev[4] !== c_expected_prev[4] )
		&& ((c_expected_prev[4] !== last_c_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c_expected_prev);
		$display ("     Real value = %b", c_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_c_exp[4] = c_expected_prev[4];
	end
	if (
		( c_expected_prev[5] !== 1'bx ) && ( c_prev[5] !== c_expected_prev[5] )
		&& ((c_expected_prev[5] !== last_c_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c_expected_prev);
		$display ("     Real value = %b", c_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_c_exp[5] = c_expected_prev[5];
	end
	if (
		( c_expected_prev[6] !== 1'bx ) && ( c_prev[6] !== c_expected_prev[6] )
		&& ((c_expected_prev[6] !== last_c_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c_expected_prev);
		$display ("     Real value = %b", c_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_c_exp[6] = c_expected_prev[6];
	end
	if (
		( c_expected_prev[7] !== 1'bx ) && ( c_prev[7] !== c_expected_prev[7] )
		&& ((c_expected_prev[7] !== last_c_exp[7]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c_expected_prev);
		$display ("     Real value = %b", c_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_c_exp[7] = c_expected_prev[7];
	end
	if (
		( hassetnum_expected_prev !== 1'bx ) && ( hassetnum_prev !== hassetnum_expected_prev )
		&& ((hassetnum_expected_prev !== last_hassetnum_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hassetnum :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hassetnum_expected_prev);
		$display ("     Real value = %b", hassetnum_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_hassetnum_exp = hassetnum_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module exp3_2_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [8:0] X;
reg [8:0] Y;
reg clk;
// wires                                               
wire [7:0] a;
wire [16:0] ans;
wire [7:0] b;
wire [7:0] c;
wire hassetnum;

wire sampler;                             

// assign statements (if any)                          
exp3_2 i1 (
// port map - connection between master ports and signals/registers   
	.X(X),
	.Y(Y),
	.a(a),
	.ans(ans),
	.b(b),
	.c(c),
	.clk(clk),
	.hassetnum(hassetnum)
);

// clk
initial
begin
	repeat(12)
	begin
		clk = 1'b0;
		clk = #40000 1'b1;
		# 40000;
	end
	clk = 1'b0;
end 
// X[ 8 ]
initial
begin
	X[8] = 1'b1;
end 
// X[ 7 ]
initial
begin
	X[7] = 1'b0;
end 
// X[ 6 ]
initial
begin
	X[6] = 1'b1;
end 
// X[ 5 ]
initial
begin
	X[5] = 1'b0;
end 
// X[ 4 ]
initial
begin
	X[4] = 1'b1;
end 
// X[ 3 ]
initial
begin
	X[3] = 1'b0;
end 
// X[ 2 ]
initial
begin
	X[2] = 1'b1;
end 
// X[ 1 ]
initial
begin
	X[1] = 1'b0;
end 
// X[ 0 ]
initial
begin
	X[0] = 1'b1;
end 
// Y[ 8 ]
initial
begin
	Y[8] = 1'b0;
end 
// Y[ 7 ]
initial
begin
	Y[7] = 1'b1;
end 
// Y[ 6 ]
initial
begin
	Y[6] = 1'b0;
end 
// Y[ 5 ]
initial
begin
	Y[5] = 1'b1;
end 
// Y[ 4 ]
initial
begin
	Y[4] = 1'b0;
end 
// Y[ 3 ]
initial
begin
	Y[3] = 1'b1;
end 
// Y[ 2 ]
initial
begin
	Y[2] = 1'b0;
end 
// Y[ 1 ]
initial
begin
	Y[1] = 1'b1;
end 
// Y[ 0 ]
initial
begin
	Y[0] = 1'b0;
end 

exp3_2_vlg_sample_tst tb_sample (
	.X(X),
	.Y(Y),
	.clk(clk),
	.sampler_tx(sampler)
);

exp3_2_vlg_check_tst tb_out(
	.a(a),
	.ans(ans),
	.b(b),
	.c(c),
	.hassetnum(hassetnum),
	.sampler_rx(sampler)
);
endmodule

