// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/19/2023 18:14:56"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    exp3_2
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module exp3_2_vlg_sample_tst(
	KEY_R,
	clk,
	clr,
	flag1,
	flag2,
	sampler_tx
);
input [3:0] KEY_R;
input  clk;
input  clr;
input  flag1;
input  flag2;
output sampler_tx;

reg sample;
time current_time;
always @(KEY_R or clk or clr or flag1 or flag2)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module exp3_2_vlg_check_tst (
	KEY_C,
	N,
	a,
	ans,
	b,
	c,
	codeout,
	cr_reg,
	flag3,
	hassetnum,
	pt,
	sel,
	sampler_rx
);
input [3:0] KEY_C;
input [31:0] N;
input [7:0] a;
input [16:0] ans;
input [7:0] b;
input [7:0] c;
input [7:0] codeout;
input [3:0] cr_reg;
input  flag3;
input  hassetnum;
input [2:0] pt;
input [2:0] sel;
input sampler_rx;

reg [3:0] KEY_C_expected;
reg [31:0] N_expected;
reg [7:0] a_expected;
reg [16:0] ans_expected;
reg [7:0] b_expected;
reg [7:0] c_expected;
reg [7:0] codeout_expected;
reg [3:0] cr_reg_expected;
reg  flag3_expected;
reg  hassetnum_expected;
reg [2:0] pt_expected;
reg [2:0] sel_expected;

reg [3:0] KEY_C_prev;
reg [31:0] N_prev;
reg [7:0] a_prev;
reg [16:0] ans_prev;
reg [7:0] b_prev;
reg [7:0] c_prev;
reg [7:0] codeout_prev;
reg [3:0] cr_reg_prev;
reg  flag3_prev;
reg  hassetnum_prev;
reg [2:0] pt_prev;
reg [2:0] sel_prev;

reg [3:0] KEY_C_expected_prev;
reg [31:0] N_expected_prev;
reg [7:0] a_expected_prev;
reg [16:0] ans_expected_prev;
reg [7:0] b_expected_prev;
reg [7:0] c_expected_prev;
reg [7:0] codeout_expected_prev;
reg [3:0] cr_reg_expected_prev;
reg  flag3_expected_prev;
reg  hassetnum_expected_prev;
reg [2:0] pt_expected_prev;
reg [2:0] sel_expected_prev;

reg [3:0] last_KEY_C_exp;
reg [31:0] last_N_exp;
reg [7:0] last_a_exp;
reg [16:0] last_ans_exp;
reg [7:0] last_b_exp;
reg [7:0] last_c_exp;
reg [7:0] last_codeout_exp;
reg [3:0] last_cr_reg_exp;
reg  last_flag3_exp;
reg  last_hassetnum_exp;
reg [2:0] last_pt_exp;
reg [2:0] last_sel_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:12] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 12'b1;
end

// update real /o prevs

always @(trigger)
begin
	KEY_C_prev = KEY_C;
	N_prev = N;
	a_prev = a;
	ans_prev = ans;
	b_prev = b;
	c_prev = c;
	codeout_prev = codeout;
	cr_reg_prev = cr_reg;
	flag3_prev = flag3;
	hassetnum_prev = hassetnum;
	pt_prev = pt;
	sel_prev = sel;
end

// update expected /o prevs

always @(trigger)
begin
	KEY_C_expected_prev = KEY_C_expected;
	N_expected_prev = N_expected;
	a_expected_prev = a_expected;
	ans_expected_prev = ans_expected;
	b_expected_prev = b_expected;
	c_expected_prev = c_expected;
	codeout_expected_prev = codeout_expected;
	cr_reg_expected_prev = cr_reg_expected;
	flag3_expected_prev = flag3_expected;
	hassetnum_expected_prev = hassetnum_expected;
	pt_expected_prev = pt_expected;
	sel_expected_prev = sel_expected;
end


// expected KEY_C[ 3 ]
initial
begin
	KEY_C_expected[3] = 1'bX;
end 
// expected KEY_C[ 2 ]
initial
begin
	KEY_C_expected[2] = 1'bX;
end 
// expected KEY_C[ 1 ]
initial
begin
	KEY_C_expected[1] = 1'bX;
end 
// expected KEY_C[ 0 ]
initial
begin
	KEY_C_expected[0] = 1'bX;
end 
// expected N[ 31 ]
initial
begin
	N_expected[31] = 1'bX;
end 
// expected N[ 30 ]
initial
begin
	N_expected[30] = 1'bX;
end 
// expected N[ 29 ]
initial
begin
	N_expected[29] = 1'bX;
end 
// expected N[ 28 ]
initial
begin
	N_expected[28] = 1'bX;
end 
// expected N[ 27 ]
initial
begin
	N_expected[27] = 1'bX;
end 
// expected N[ 26 ]
initial
begin
	N_expected[26] = 1'bX;
end 
// expected N[ 25 ]
initial
begin
	N_expected[25] = 1'bX;
end 
// expected N[ 24 ]
initial
begin
	N_expected[24] = 1'bX;
end 
// expected N[ 23 ]
initial
begin
	N_expected[23] = 1'bX;
end 
// expected N[ 22 ]
initial
begin
	N_expected[22] = 1'bX;
end 
// expected N[ 21 ]
initial
begin
	N_expected[21] = 1'bX;
end 
// expected N[ 20 ]
initial
begin
	N_expected[20] = 1'bX;
end 
// expected N[ 19 ]
initial
begin
	N_expected[19] = 1'bX;
end 
// expected N[ 18 ]
initial
begin
	N_expected[18] = 1'bX;
end 
// expected N[ 17 ]
initial
begin
	N_expected[17] = 1'bX;
end 
// expected N[ 16 ]
initial
begin
	N_expected[16] = 1'bX;
end 
// expected N[ 15 ]
initial
begin
	N_expected[15] = 1'bX;
end 
// expected N[ 14 ]
initial
begin
	N_expected[14] = 1'bX;
end 
// expected N[ 13 ]
initial
begin
	N_expected[13] = 1'bX;
end 
// expected N[ 12 ]
initial
begin
	N_expected[12] = 1'bX;
end 
// expected N[ 11 ]
initial
begin
	N_expected[11] = 1'bX;
end 
// expected N[ 10 ]
initial
begin
	N_expected[10] = 1'bX;
end 
// expected N[ 9 ]
initial
begin
	N_expected[9] = 1'bX;
end 
// expected N[ 8 ]
initial
begin
	N_expected[8] = 1'bX;
end 
// expected N[ 7 ]
initial
begin
	N_expected[7] = 1'bX;
end 
// expected N[ 6 ]
initial
begin
	N_expected[6] = 1'bX;
end 
// expected N[ 5 ]
initial
begin
	N_expected[5] = 1'bX;
end 
// expected N[ 4 ]
initial
begin
	N_expected[4] = 1'bX;
end 
// expected N[ 3 ]
initial
begin
	N_expected[3] = 1'bX;
end 
// expected N[ 2 ]
initial
begin
	N_expected[2] = 1'bX;
end 
// expected N[ 1 ]
initial
begin
	N_expected[1] = 1'bX;
end 
// expected N[ 0 ]
initial
begin
	N_expected[0] = 1'bX;
end 
// expected a[ 7 ]
initial
begin
	a_expected[7] = 1'bX;
end 
// expected a[ 6 ]
initial
begin
	a_expected[6] = 1'bX;
end 
// expected a[ 5 ]
initial
begin
	a_expected[5] = 1'bX;
end 
// expected a[ 4 ]
initial
begin
	a_expected[4] = 1'bX;
end 
// expected a[ 3 ]
initial
begin
	a_expected[3] = 1'bX;
end 
// expected a[ 2 ]
initial
begin
	a_expected[2] = 1'bX;
end 
// expected a[ 1 ]
initial
begin
	a_expected[1] = 1'bX;
end 
// expected a[ 0 ]
initial
begin
	a_expected[0] = 1'bX;
end 
// expected ans[ 16 ]
initial
begin
	ans_expected[16] = 1'bX;
end 
// expected ans[ 15 ]
initial
begin
	ans_expected[15] = 1'bX;
end 
// expected ans[ 14 ]
initial
begin
	ans_expected[14] = 1'bX;
end 
// expected ans[ 13 ]
initial
begin
	ans_expected[13] = 1'bX;
end 
// expected ans[ 12 ]
initial
begin
	ans_expected[12] = 1'bX;
end 
// expected ans[ 11 ]
initial
begin
	ans_expected[11] = 1'bX;
end 
// expected ans[ 10 ]
initial
begin
	ans_expected[10] = 1'bX;
end 
// expected ans[ 9 ]
initial
begin
	ans_expected[9] = 1'bX;
end 
// expected ans[ 8 ]
initial
begin
	ans_expected[8] = 1'bX;
end 
// expected ans[ 7 ]
initial
begin
	ans_expected[7] = 1'bX;
end 
// expected ans[ 6 ]
initial
begin
	ans_expected[6] = 1'bX;
end 
// expected ans[ 5 ]
initial
begin
	ans_expected[5] = 1'bX;
end 
// expected ans[ 4 ]
initial
begin
	ans_expected[4] = 1'bX;
end 
// expected ans[ 3 ]
initial
begin
	ans_expected[3] = 1'bX;
end 
// expected ans[ 2 ]
initial
begin
	ans_expected[2] = 1'bX;
end 
// expected ans[ 1 ]
initial
begin
	ans_expected[1] = 1'bX;
end 
// expected ans[ 0 ]
initial
begin
	ans_expected[0] = 1'bX;
end 
// expected b[ 7 ]
initial
begin
	b_expected[7] = 1'bX;
end 
// expected b[ 6 ]
initial
begin
	b_expected[6] = 1'bX;
end 
// expected b[ 5 ]
initial
begin
	b_expected[5] = 1'bX;
end 
// expected b[ 4 ]
initial
begin
	b_expected[4] = 1'bX;
end 
// expected b[ 3 ]
initial
begin
	b_expected[3] = 1'bX;
end 
// expected b[ 2 ]
initial
begin
	b_expected[2] = 1'bX;
end 
// expected b[ 1 ]
initial
begin
	b_expected[1] = 1'bX;
end 
// expected b[ 0 ]
initial
begin
	b_expected[0] = 1'bX;
end 
// expected c[ 7 ]
initial
begin
	c_expected[7] = 1'bX;
end 
// expected c[ 6 ]
initial
begin
	c_expected[6] = 1'bX;
end 
// expected c[ 5 ]
initial
begin
	c_expected[5] = 1'bX;
end 
// expected c[ 4 ]
initial
begin
	c_expected[4] = 1'bX;
end 
// expected c[ 3 ]
initial
begin
	c_expected[3] = 1'bX;
end 
// expected c[ 2 ]
initial
begin
	c_expected[2] = 1'bX;
end 
// expected c[ 1 ]
initial
begin
	c_expected[1] = 1'bX;
end 
// expected c[ 0 ]
initial
begin
	c_expected[0] = 1'bX;
end 
// expected codeout[ 7 ]
initial
begin
	codeout_expected[7] = 1'bX;
end 
// expected codeout[ 6 ]
initial
begin
	codeout_expected[6] = 1'bX;
end 
// expected codeout[ 5 ]
initial
begin
	codeout_expected[5] = 1'bX;
end 
// expected codeout[ 4 ]
initial
begin
	codeout_expected[4] = 1'bX;
end 
// expected codeout[ 3 ]
initial
begin
	codeout_expected[3] = 1'bX;
end 
// expected codeout[ 2 ]
initial
begin
	codeout_expected[2] = 1'bX;
end 
// expected codeout[ 1 ]
initial
begin
	codeout_expected[1] = 1'bX;
end 
// expected codeout[ 0 ]
initial
begin
	codeout_expected[0] = 1'bX;
end 
// expected cr_reg[ 3 ]
initial
begin
	cr_reg_expected[3] = 1'bX;
end 
// expected cr_reg[ 2 ]
initial
begin
	cr_reg_expected[2] = 1'bX;
end 
// expected cr_reg[ 1 ]
initial
begin
	cr_reg_expected[1] = 1'bX;
end 
// expected cr_reg[ 0 ]
initial
begin
	cr_reg_expected[0] = 1'bX;
end 

// expected flag3
initial
begin
	flag3_expected = 1'bX;
end 

// expected hassetnum
initial
begin
	hassetnum_expected = 1'bX;
end 
// expected pt[ 2 ]
initial
begin
	pt_expected[2] = 1'bX;
end 
// expected pt[ 1 ]
initial
begin
	pt_expected[1] = 1'bX;
end 
// expected pt[ 0 ]
initial
begin
	pt_expected[0] = 1'bX;
end 
// expected sel[ 2 ]
initial
begin
	sel_expected[2] = 1'bX;
end 
// expected sel[ 1 ]
initial
begin
	sel_expected[1] = 1'bX;
end 
// expected sel[ 0 ]
initial
begin
	sel_expected[0] = 1'bX;
end 
// generate trigger
always @(KEY_C_expected or KEY_C or N_expected or N or a_expected or a or ans_expected or ans or b_expected or b or c_expected or c or codeout_expected or codeout or cr_reg_expected or cr_reg or flag3_expected or flag3 or hassetnum_expected or hassetnum or pt_expected or pt or sel_expected or sel)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected KEY_C = %b | expected N = %b | expected a = %b | expected ans = %b | expected b = %b | expected c = %b | expected codeout = %b | expected cr_reg = %b | expected flag3 = %b | expected hassetnum = %b | expected pt = %b | expected sel = %b | ",KEY_C_expected_prev,N_expected_prev,a_expected_prev,ans_expected_prev,b_expected_prev,c_expected_prev,codeout_expected_prev,cr_reg_expected_prev,flag3_expected_prev,hassetnum_expected_prev,pt_expected_prev,sel_expected_prev);
	$display("| real KEY_C = %b | real N = %b | real a = %b | real ans = %b | real b = %b | real c = %b | real codeout = %b | real cr_reg = %b | real flag3 = %b | real hassetnum = %b | real pt = %b | real sel = %b | ",KEY_C_prev,N_prev,a_prev,ans_prev,b_prev,c_prev,codeout_prev,cr_reg_prev,flag3_prev,hassetnum_prev,pt_prev,sel_prev);
`endif
	if (
		( KEY_C_expected_prev[0] !== 1'bx ) && ( KEY_C_prev[0] !== KEY_C_expected_prev[0] )
		&& ((KEY_C_expected_prev[0] !== last_KEY_C_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port KEY_C[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", KEY_C_expected_prev);
		$display ("     Real value = %b", KEY_C_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_KEY_C_exp[0] = KEY_C_expected_prev[0];
	end
	if (
		( KEY_C_expected_prev[1] !== 1'bx ) && ( KEY_C_prev[1] !== KEY_C_expected_prev[1] )
		&& ((KEY_C_expected_prev[1] !== last_KEY_C_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port KEY_C[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", KEY_C_expected_prev);
		$display ("     Real value = %b", KEY_C_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_KEY_C_exp[1] = KEY_C_expected_prev[1];
	end
	if (
		( KEY_C_expected_prev[2] !== 1'bx ) && ( KEY_C_prev[2] !== KEY_C_expected_prev[2] )
		&& ((KEY_C_expected_prev[2] !== last_KEY_C_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port KEY_C[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", KEY_C_expected_prev);
		$display ("     Real value = %b", KEY_C_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_KEY_C_exp[2] = KEY_C_expected_prev[2];
	end
	if (
		( KEY_C_expected_prev[3] !== 1'bx ) && ( KEY_C_prev[3] !== KEY_C_expected_prev[3] )
		&& ((KEY_C_expected_prev[3] !== last_KEY_C_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port KEY_C[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", KEY_C_expected_prev);
		$display ("     Real value = %b", KEY_C_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_KEY_C_exp[3] = KEY_C_expected_prev[3];
	end
	if (
		( N_expected_prev[0] !== 1'bx ) && ( N_prev[0] !== N_expected_prev[0] )
		&& ((N_expected_prev[0] !== last_N_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port N[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", N_expected_prev);
		$display ("     Real value = %b", N_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_N_exp[0] = N_expected_prev[0];
	end
	if (
		( N_expected_prev[1] !== 1'bx ) && ( N_prev[1] !== N_expected_prev[1] )
		&& ((N_expected_prev[1] !== last_N_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port N[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", N_expected_prev);
		$display ("     Real value = %b", N_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_N_exp[1] = N_expected_prev[1];
	end
	if (
		( N_expected_prev[2] !== 1'bx ) && ( N_prev[2] !== N_expected_prev[2] )
		&& ((N_expected_prev[2] !== last_N_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port N[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", N_expected_prev);
		$display ("     Real value = %b", N_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_N_exp[2] = N_expected_prev[2];
	end
	if (
		( N_expected_prev[3] !== 1'bx ) && ( N_prev[3] !== N_expected_prev[3] )
		&& ((N_expected_prev[3] !== last_N_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port N[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", N_expected_prev);
		$display ("     Real value = %b", N_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_N_exp[3] = N_expected_prev[3];
	end
	if (
		( N_expected_prev[4] !== 1'bx ) && ( N_prev[4] !== N_expected_prev[4] )
		&& ((N_expected_prev[4] !== last_N_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port N[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", N_expected_prev);
		$display ("     Real value = %b", N_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_N_exp[4] = N_expected_prev[4];
	end
	if (
		( N_expected_prev[5] !== 1'bx ) && ( N_prev[5] !== N_expected_prev[5] )
		&& ((N_expected_prev[5] !== last_N_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port N[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", N_expected_prev);
		$display ("     Real value = %b", N_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_N_exp[5] = N_expected_prev[5];
	end
	if (
		( N_expected_prev[6] !== 1'bx ) && ( N_prev[6] !== N_expected_prev[6] )
		&& ((N_expected_prev[6] !== last_N_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port N[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", N_expected_prev);
		$display ("     Real value = %b", N_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_N_exp[6] = N_expected_prev[6];
	end
	if (
		( N_expected_prev[7] !== 1'bx ) && ( N_prev[7] !== N_expected_prev[7] )
		&& ((N_expected_prev[7] !== last_N_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port N[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", N_expected_prev);
		$display ("     Real value = %b", N_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_N_exp[7] = N_expected_prev[7];
	end
	if (
		( N_expected_prev[8] !== 1'bx ) && ( N_prev[8] !== N_expected_prev[8] )
		&& ((N_expected_prev[8] !== last_N_exp[8]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port N[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", N_expected_prev);
		$display ("     Real value = %b", N_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_N_exp[8] = N_expected_prev[8];
	end
	if (
		( N_expected_prev[9] !== 1'bx ) && ( N_prev[9] !== N_expected_prev[9] )
		&& ((N_expected_prev[9] !== last_N_exp[9]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port N[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", N_expected_prev);
		$display ("     Real value = %b", N_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_N_exp[9] = N_expected_prev[9];
	end
	if (
		( N_expected_prev[10] !== 1'bx ) && ( N_prev[10] !== N_expected_prev[10] )
		&& ((N_expected_prev[10] !== last_N_exp[10]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port N[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", N_expected_prev);
		$display ("     Real value = %b", N_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_N_exp[10] = N_expected_prev[10];
	end
	if (
		( N_expected_prev[11] !== 1'bx ) && ( N_prev[11] !== N_expected_prev[11] )
		&& ((N_expected_prev[11] !== last_N_exp[11]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port N[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", N_expected_prev);
		$display ("     Real value = %b", N_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_N_exp[11] = N_expected_prev[11];
	end
	if (
		( N_expected_prev[12] !== 1'bx ) && ( N_prev[12] !== N_expected_prev[12] )
		&& ((N_expected_prev[12] !== last_N_exp[12]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port N[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", N_expected_prev);
		$display ("     Real value = %b", N_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_N_exp[12] = N_expected_prev[12];
	end
	if (
		( N_expected_prev[13] !== 1'bx ) && ( N_prev[13] !== N_expected_prev[13] )
		&& ((N_expected_prev[13] !== last_N_exp[13]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port N[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", N_expected_prev);
		$display ("     Real value = %b", N_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_N_exp[13] = N_expected_prev[13];
	end
	if (
		( N_expected_prev[14] !== 1'bx ) && ( N_prev[14] !== N_expected_prev[14] )
		&& ((N_expected_prev[14] !== last_N_exp[14]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port N[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", N_expected_prev);
		$display ("     Real value = %b", N_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_N_exp[14] = N_expected_prev[14];
	end
	if (
		( N_expected_prev[15] !== 1'bx ) && ( N_prev[15] !== N_expected_prev[15] )
		&& ((N_expected_prev[15] !== last_N_exp[15]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port N[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", N_expected_prev);
		$display ("     Real value = %b", N_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_N_exp[15] = N_expected_prev[15];
	end
	if (
		( N_expected_prev[16] !== 1'bx ) && ( N_prev[16] !== N_expected_prev[16] )
		&& ((N_expected_prev[16] !== last_N_exp[16]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port N[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", N_expected_prev);
		$display ("     Real value = %b", N_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_N_exp[16] = N_expected_prev[16];
	end
	if (
		( N_expected_prev[17] !== 1'bx ) && ( N_prev[17] !== N_expected_prev[17] )
		&& ((N_expected_prev[17] !== last_N_exp[17]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port N[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", N_expected_prev);
		$display ("     Real value = %b", N_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_N_exp[17] = N_expected_prev[17];
	end
	if (
		( N_expected_prev[18] !== 1'bx ) && ( N_prev[18] !== N_expected_prev[18] )
		&& ((N_expected_prev[18] !== last_N_exp[18]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port N[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", N_expected_prev);
		$display ("     Real value = %b", N_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_N_exp[18] = N_expected_prev[18];
	end
	if (
		( N_expected_prev[19] !== 1'bx ) && ( N_prev[19] !== N_expected_prev[19] )
		&& ((N_expected_prev[19] !== last_N_exp[19]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port N[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", N_expected_prev);
		$display ("     Real value = %b", N_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_N_exp[19] = N_expected_prev[19];
	end
	if (
		( N_expected_prev[20] !== 1'bx ) && ( N_prev[20] !== N_expected_prev[20] )
		&& ((N_expected_prev[20] !== last_N_exp[20]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port N[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", N_expected_prev);
		$display ("     Real value = %b", N_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_N_exp[20] = N_expected_prev[20];
	end
	if (
		( N_expected_prev[21] !== 1'bx ) && ( N_prev[21] !== N_expected_prev[21] )
		&& ((N_expected_prev[21] !== last_N_exp[21]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port N[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", N_expected_prev);
		$display ("     Real value = %b", N_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_N_exp[21] = N_expected_prev[21];
	end
	if (
		( N_expected_prev[22] !== 1'bx ) && ( N_prev[22] !== N_expected_prev[22] )
		&& ((N_expected_prev[22] !== last_N_exp[22]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port N[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", N_expected_prev);
		$display ("     Real value = %b", N_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_N_exp[22] = N_expected_prev[22];
	end
	if (
		( N_expected_prev[23] !== 1'bx ) && ( N_prev[23] !== N_expected_prev[23] )
		&& ((N_expected_prev[23] !== last_N_exp[23]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port N[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", N_expected_prev);
		$display ("     Real value = %b", N_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_N_exp[23] = N_expected_prev[23];
	end
	if (
		( N_expected_prev[24] !== 1'bx ) && ( N_prev[24] !== N_expected_prev[24] )
		&& ((N_expected_prev[24] !== last_N_exp[24]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port N[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", N_expected_prev);
		$display ("     Real value = %b", N_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_N_exp[24] = N_expected_prev[24];
	end
	if (
		( N_expected_prev[25] !== 1'bx ) && ( N_prev[25] !== N_expected_prev[25] )
		&& ((N_expected_prev[25] !== last_N_exp[25]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port N[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", N_expected_prev);
		$display ("     Real value = %b", N_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_N_exp[25] = N_expected_prev[25];
	end
	if (
		( N_expected_prev[26] !== 1'bx ) && ( N_prev[26] !== N_expected_prev[26] )
		&& ((N_expected_prev[26] !== last_N_exp[26]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port N[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", N_expected_prev);
		$display ("     Real value = %b", N_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_N_exp[26] = N_expected_prev[26];
	end
	if (
		( N_expected_prev[27] !== 1'bx ) && ( N_prev[27] !== N_expected_prev[27] )
		&& ((N_expected_prev[27] !== last_N_exp[27]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port N[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", N_expected_prev);
		$display ("     Real value = %b", N_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_N_exp[27] = N_expected_prev[27];
	end
	if (
		( N_expected_prev[28] !== 1'bx ) && ( N_prev[28] !== N_expected_prev[28] )
		&& ((N_expected_prev[28] !== last_N_exp[28]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port N[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", N_expected_prev);
		$display ("     Real value = %b", N_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_N_exp[28] = N_expected_prev[28];
	end
	if (
		( N_expected_prev[29] !== 1'bx ) && ( N_prev[29] !== N_expected_prev[29] )
		&& ((N_expected_prev[29] !== last_N_exp[29]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port N[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", N_expected_prev);
		$display ("     Real value = %b", N_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_N_exp[29] = N_expected_prev[29];
	end
	if (
		( N_expected_prev[30] !== 1'bx ) && ( N_prev[30] !== N_expected_prev[30] )
		&& ((N_expected_prev[30] !== last_N_exp[30]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port N[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", N_expected_prev);
		$display ("     Real value = %b", N_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_N_exp[30] = N_expected_prev[30];
	end
	if (
		( N_expected_prev[31] !== 1'bx ) && ( N_prev[31] !== N_expected_prev[31] )
		&& ((N_expected_prev[31] !== last_N_exp[31]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port N[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", N_expected_prev);
		$display ("     Real value = %b", N_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_N_exp[31] = N_expected_prev[31];
	end
	if (
		( a_expected_prev[0] !== 1'bx ) && ( a_prev[0] !== a_expected_prev[0] )
		&& ((a_expected_prev[0] !== last_a_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port a[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", a_expected_prev);
		$display ("     Real value = %b", a_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_a_exp[0] = a_expected_prev[0];
	end
	if (
		( a_expected_prev[1] !== 1'bx ) && ( a_prev[1] !== a_expected_prev[1] )
		&& ((a_expected_prev[1] !== last_a_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port a[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", a_expected_prev);
		$display ("     Real value = %b", a_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_a_exp[1] = a_expected_prev[1];
	end
	if (
		( a_expected_prev[2] !== 1'bx ) && ( a_prev[2] !== a_expected_prev[2] )
		&& ((a_expected_prev[2] !== last_a_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port a[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", a_expected_prev);
		$display ("     Real value = %b", a_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_a_exp[2] = a_expected_prev[2];
	end
	if (
		( a_expected_prev[3] !== 1'bx ) && ( a_prev[3] !== a_expected_prev[3] )
		&& ((a_expected_prev[3] !== last_a_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port a[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", a_expected_prev);
		$display ("     Real value = %b", a_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_a_exp[3] = a_expected_prev[3];
	end
	if (
		( a_expected_prev[4] !== 1'bx ) && ( a_prev[4] !== a_expected_prev[4] )
		&& ((a_expected_prev[4] !== last_a_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port a[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", a_expected_prev);
		$display ("     Real value = %b", a_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_a_exp[4] = a_expected_prev[4];
	end
	if (
		( a_expected_prev[5] !== 1'bx ) && ( a_prev[5] !== a_expected_prev[5] )
		&& ((a_expected_prev[5] !== last_a_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port a[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", a_expected_prev);
		$display ("     Real value = %b", a_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_a_exp[5] = a_expected_prev[5];
	end
	if (
		( a_expected_prev[6] !== 1'bx ) && ( a_prev[6] !== a_expected_prev[6] )
		&& ((a_expected_prev[6] !== last_a_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port a[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", a_expected_prev);
		$display ("     Real value = %b", a_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_a_exp[6] = a_expected_prev[6];
	end
	if (
		( a_expected_prev[7] !== 1'bx ) && ( a_prev[7] !== a_expected_prev[7] )
		&& ((a_expected_prev[7] !== last_a_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port a[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", a_expected_prev);
		$display ("     Real value = %b", a_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_a_exp[7] = a_expected_prev[7];
	end
	if (
		( ans_expected_prev[0] !== 1'bx ) && ( ans_prev[0] !== ans_expected_prev[0] )
		&& ((ans_expected_prev[0] !== last_ans_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ans[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ans_expected_prev);
		$display ("     Real value = %b", ans_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_ans_exp[0] = ans_expected_prev[0];
	end
	if (
		( ans_expected_prev[1] !== 1'bx ) && ( ans_prev[1] !== ans_expected_prev[1] )
		&& ((ans_expected_prev[1] !== last_ans_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ans[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ans_expected_prev);
		$display ("     Real value = %b", ans_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_ans_exp[1] = ans_expected_prev[1];
	end
	if (
		( ans_expected_prev[2] !== 1'bx ) && ( ans_prev[2] !== ans_expected_prev[2] )
		&& ((ans_expected_prev[2] !== last_ans_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ans[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ans_expected_prev);
		$display ("     Real value = %b", ans_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_ans_exp[2] = ans_expected_prev[2];
	end
	if (
		( ans_expected_prev[3] !== 1'bx ) && ( ans_prev[3] !== ans_expected_prev[3] )
		&& ((ans_expected_prev[3] !== last_ans_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ans[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ans_expected_prev);
		$display ("     Real value = %b", ans_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_ans_exp[3] = ans_expected_prev[3];
	end
	if (
		( ans_expected_prev[4] !== 1'bx ) && ( ans_prev[4] !== ans_expected_prev[4] )
		&& ((ans_expected_prev[4] !== last_ans_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ans[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ans_expected_prev);
		$display ("     Real value = %b", ans_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_ans_exp[4] = ans_expected_prev[4];
	end
	if (
		( ans_expected_prev[5] !== 1'bx ) && ( ans_prev[5] !== ans_expected_prev[5] )
		&& ((ans_expected_prev[5] !== last_ans_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ans[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ans_expected_prev);
		$display ("     Real value = %b", ans_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_ans_exp[5] = ans_expected_prev[5];
	end
	if (
		( ans_expected_prev[6] !== 1'bx ) && ( ans_prev[6] !== ans_expected_prev[6] )
		&& ((ans_expected_prev[6] !== last_ans_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ans[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ans_expected_prev);
		$display ("     Real value = %b", ans_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_ans_exp[6] = ans_expected_prev[6];
	end
	if (
		( ans_expected_prev[7] !== 1'bx ) && ( ans_prev[7] !== ans_expected_prev[7] )
		&& ((ans_expected_prev[7] !== last_ans_exp[7]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ans[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ans_expected_prev);
		$display ("     Real value = %b", ans_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_ans_exp[7] = ans_expected_prev[7];
	end
	if (
		( ans_expected_prev[8] !== 1'bx ) && ( ans_prev[8] !== ans_expected_prev[8] )
		&& ((ans_expected_prev[8] !== last_ans_exp[8]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ans[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ans_expected_prev);
		$display ("     Real value = %b", ans_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_ans_exp[8] = ans_expected_prev[8];
	end
	if (
		( ans_expected_prev[9] !== 1'bx ) && ( ans_prev[9] !== ans_expected_prev[9] )
		&& ((ans_expected_prev[9] !== last_ans_exp[9]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ans[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ans_expected_prev);
		$display ("     Real value = %b", ans_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_ans_exp[9] = ans_expected_prev[9];
	end
	if (
		( ans_expected_prev[10] !== 1'bx ) && ( ans_prev[10] !== ans_expected_prev[10] )
		&& ((ans_expected_prev[10] !== last_ans_exp[10]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ans[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ans_expected_prev);
		$display ("     Real value = %b", ans_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_ans_exp[10] = ans_expected_prev[10];
	end
	if (
		( ans_expected_prev[11] !== 1'bx ) && ( ans_prev[11] !== ans_expected_prev[11] )
		&& ((ans_expected_prev[11] !== last_ans_exp[11]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ans[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ans_expected_prev);
		$display ("     Real value = %b", ans_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_ans_exp[11] = ans_expected_prev[11];
	end
	if (
		( ans_expected_prev[12] !== 1'bx ) && ( ans_prev[12] !== ans_expected_prev[12] )
		&& ((ans_expected_prev[12] !== last_ans_exp[12]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ans[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ans_expected_prev);
		$display ("     Real value = %b", ans_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_ans_exp[12] = ans_expected_prev[12];
	end
	if (
		( ans_expected_prev[13] !== 1'bx ) && ( ans_prev[13] !== ans_expected_prev[13] )
		&& ((ans_expected_prev[13] !== last_ans_exp[13]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ans[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ans_expected_prev);
		$display ("     Real value = %b", ans_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_ans_exp[13] = ans_expected_prev[13];
	end
	if (
		( ans_expected_prev[14] !== 1'bx ) && ( ans_prev[14] !== ans_expected_prev[14] )
		&& ((ans_expected_prev[14] !== last_ans_exp[14]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ans[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ans_expected_prev);
		$display ("     Real value = %b", ans_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_ans_exp[14] = ans_expected_prev[14];
	end
	if (
		( ans_expected_prev[15] !== 1'bx ) && ( ans_prev[15] !== ans_expected_prev[15] )
		&& ((ans_expected_prev[15] !== last_ans_exp[15]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ans[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ans_expected_prev);
		$display ("     Real value = %b", ans_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_ans_exp[15] = ans_expected_prev[15];
	end
	if (
		( ans_expected_prev[16] !== 1'bx ) && ( ans_prev[16] !== ans_expected_prev[16] )
		&& ((ans_expected_prev[16] !== last_ans_exp[16]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ans[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ans_expected_prev);
		$display ("     Real value = %b", ans_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_ans_exp[16] = ans_expected_prev[16];
	end
	if (
		( b_expected_prev[0] !== 1'bx ) && ( b_prev[0] !== b_expected_prev[0] )
		&& ((b_expected_prev[0] !== last_b_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port b[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", b_expected_prev);
		$display ("     Real value = %b", b_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_b_exp[0] = b_expected_prev[0];
	end
	if (
		( b_expected_prev[1] !== 1'bx ) && ( b_prev[1] !== b_expected_prev[1] )
		&& ((b_expected_prev[1] !== last_b_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port b[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", b_expected_prev);
		$display ("     Real value = %b", b_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_b_exp[1] = b_expected_prev[1];
	end
	if (
		( b_expected_prev[2] !== 1'bx ) && ( b_prev[2] !== b_expected_prev[2] )
		&& ((b_expected_prev[2] !== last_b_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port b[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", b_expected_prev);
		$display ("     Real value = %b", b_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_b_exp[2] = b_expected_prev[2];
	end
	if (
		( b_expected_prev[3] !== 1'bx ) && ( b_prev[3] !== b_expected_prev[3] )
		&& ((b_expected_prev[3] !== last_b_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port b[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", b_expected_prev);
		$display ("     Real value = %b", b_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_b_exp[3] = b_expected_prev[3];
	end
	if (
		( b_expected_prev[4] !== 1'bx ) && ( b_prev[4] !== b_expected_prev[4] )
		&& ((b_expected_prev[4] !== last_b_exp[4]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port b[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", b_expected_prev);
		$display ("     Real value = %b", b_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_b_exp[4] = b_expected_prev[4];
	end
	if (
		( b_expected_prev[5] !== 1'bx ) && ( b_prev[5] !== b_expected_prev[5] )
		&& ((b_expected_prev[5] !== last_b_exp[5]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port b[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", b_expected_prev);
		$display ("     Real value = %b", b_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_b_exp[5] = b_expected_prev[5];
	end
	if (
		( b_expected_prev[6] !== 1'bx ) && ( b_prev[6] !== b_expected_prev[6] )
		&& ((b_expected_prev[6] !== last_b_exp[6]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port b[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", b_expected_prev);
		$display ("     Real value = %b", b_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_b_exp[6] = b_expected_prev[6];
	end
	if (
		( b_expected_prev[7] !== 1'bx ) && ( b_prev[7] !== b_expected_prev[7] )
		&& ((b_expected_prev[7] !== last_b_exp[7]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port b[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", b_expected_prev);
		$display ("     Real value = %b", b_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_b_exp[7] = b_expected_prev[7];
	end
	if (
		( c_expected_prev[0] !== 1'bx ) && ( c_prev[0] !== c_expected_prev[0] )
		&& ((c_expected_prev[0] !== last_c_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c_expected_prev);
		$display ("     Real value = %b", c_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_c_exp[0] = c_expected_prev[0];
	end
	if (
		( c_expected_prev[1] !== 1'bx ) && ( c_prev[1] !== c_expected_prev[1] )
		&& ((c_expected_prev[1] !== last_c_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c_expected_prev);
		$display ("     Real value = %b", c_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_c_exp[1] = c_expected_prev[1];
	end
	if (
		( c_expected_prev[2] !== 1'bx ) && ( c_prev[2] !== c_expected_prev[2] )
		&& ((c_expected_prev[2] !== last_c_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c_expected_prev);
		$display ("     Real value = %b", c_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_c_exp[2] = c_expected_prev[2];
	end
	if (
		( c_expected_prev[3] !== 1'bx ) && ( c_prev[3] !== c_expected_prev[3] )
		&& ((c_expected_prev[3] !== last_c_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c_expected_prev);
		$display ("     Real value = %b", c_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_c_exp[3] = c_expected_prev[3];
	end
	if (
		( c_expected_prev[4] !== 1'bx ) && ( c_prev[4] !== c_expected_prev[4] )
		&& ((c_expected_prev[4] !== last_c_exp[4]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c_expected_prev);
		$display ("     Real value = %b", c_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_c_exp[4] = c_expected_prev[4];
	end
	if (
		( c_expected_prev[5] !== 1'bx ) && ( c_prev[5] !== c_expected_prev[5] )
		&& ((c_expected_prev[5] !== last_c_exp[5]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c_expected_prev);
		$display ("     Real value = %b", c_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_c_exp[5] = c_expected_prev[5];
	end
	if (
		( c_expected_prev[6] !== 1'bx ) && ( c_prev[6] !== c_expected_prev[6] )
		&& ((c_expected_prev[6] !== last_c_exp[6]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c_expected_prev);
		$display ("     Real value = %b", c_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_c_exp[6] = c_expected_prev[6];
	end
	if (
		( c_expected_prev[7] !== 1'bx ) && ( c_prev[7] !== c_expected_prev[7] )
		&& ((c_expected_prev[7] !== last_c_exp[7]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c_expected_prev);
		$display ("     Real value = %b", c_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_c_exp[7] = c_expected_prev[7];
	end
	if (
		( codeout_expected_prev[0] !== 1'bx ) && ( codeout_prev[0] !== codeout_expected_prev[0] )
		&& ((codeout_expected_prev[0] !== last_codeout_exp[0]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port codeout[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", codeout_expected_prev);
		$display ("     Real value = %b", codeout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_codeout_exp[0] = codeout_expected_prev[0];
	end
	if (
		( codeout_expected_prev[1] !== 1'bx ) && ( codeout_prev[1] !== codeout_expected_prev[1] )
		&& ((codeout_expected_prev[1] !== last_codeout_exp[1]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port codeout[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", codeout_expected_prev);
		$display ("     Real value = %b", codeout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_codeout_exp[1] = codeout_expected_prev[1];
	end
	if (
		( codeout_expected_prev[2] !== 1'bx ) && ( codeout_prev[2] !== codeout_expected_prev[2] )
		&& ((codeout_expected_prev[2] !== last_codeout_exp[2]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port codeout[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", codeout_expected_prev);
		$display ("     Real value = %b", codeout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_codeout_exp[2] = codeout_expected_prev[2];
	end
	if (
		( codeout_expected_prev[3] !== 1'bx ) && ( codeout_prev[3] !== codeout_expected_prev[3] )
		&& ((codeout_expected_prev[3] !== last_codeout_exp[3]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port codeout[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", codeout_expected_prev);
		$display ("     Real value = %b", codeout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_codeout_exp[3] = codeout_expected_prev[3];
	end
	if (
		( codeout_expected_prev[4] !== 1'bx ) && ( codeout_prev[4] !== codeout_expected_prev[4] )
		&& ((codeout_expected_prev[4] !== last_codeout_exp[4]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port codeout[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", codeout_expected_prev);
		$display ("     Real value = %b", codeout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_codeout_exp[4] = codeout_expected_prev[4];
	end
	if (
		( codeout_expected_prev[5] !== 1'bx ) && ( codeout_prev[5] !== codeout_expected_prev[5] )
		&& ((codeout_expected_prev[5] !== last_codeout_exp[5]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port codeout[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", codeout_expected_prev);
		$display ("     Real value = %b", codeout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_codeout_exp[5] = codeout_expected_prev[5];
	end
	if (
		( codeout_expected_prev[6] !== 1'bx ) && ( codeout_prev[6] !== codeout_expected_prev[6] )
		&& ((codeout_expected_prev[6] !== last_codeout_exp[6]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port codeout[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", codeout_expected_prev);
		$display ("     Real value = %b", codeout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_codeout_exp[6] = codeout_expected_prev[6];
	end
	if (
		( codeout_expected_prev[7] !== 1'bx ) && ( codeout_prev[7] !== codeout_expected_prev[7] )
		&& ((codeout_expected_prev[7] !== last_codeout_exp[7]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port codeout[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", codeout_expected_prev);
		$display ("     Real value = %b", codeout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_codeout_exp[7] = codeout_expected_prev[7];
	end
	if (
		( cr_reg_expected_prev[0] !== 1'bx ) && ( cr_reg_prev[0] !== cr_reg_expected_prev[0] )
		&& ((cr_reg_expected_prev[0] !== last_cr_reg_exp[0]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cr_reg[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cr_reg_expected_prev);
		$display ("     Real value = %b", cr_reg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_cr_reg_exp[0] = cr_reg_expected_prev[0];
	end
	if (
		( cr_reg_expected_prev[1] !== 1'bx ) && ( cr_reg_prev[1] !== cr_reg_expected_prev[1] )
		&& ((cr_reg_expected_prev[1] !== last_cr_reg_exp[1]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cr_reg[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cr_reg_expected_prev);
		$display ("     Real value = %b", cr_reg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_cr_reg_exp[1] = cr_reg_expected_prev[1];
	end
	if (
		( cr_reg_expected_prev[2] !== 1'bx ) && ( cr_reg_prev[2] !== cr_reg_expected_prev[2] )
		&& ((cr_reg_expected_prev[2] !== last_cr_reg_exp[2]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cr_reg[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cr_reg_expected_prev);
		$display ("     Real value = %b", cr_reg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_cr_reg_exp[2] = cr_reg_expected_prev[2];
	end
	if (
		( cr_reg_expected_prev[3] !== 1'bx ) && ( cr_reg_prev[3] !== cr_reg_expected_prev[3] )
		&& ((cr_reg_expected_prev[3] !== last_cr_reg_exp[3]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cr_reg[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cr_reg_expected_prev);
		$display ("     Real value = %b", cr_reg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_cr_reg_exp[3] = cr_reg_expected_prev[3];
	end
	if (
		( flag3_expected_prev !== 1'bx ) && ( flag3_prev !== flag3_expected_prev )
		&& ((flag3_expected_prev !== last_flag3_exp) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port flag3 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", flag3_expected_prev);
		$display ("     Real value = %b", flag3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_flag3_exp = flag3_expected_prev;
	end
	if (
		( hassetnum_expected_prev !== 1'bx ) && ( hassetnum_prev !== hassetnum_expected_prev )
		&& ((hassetnum_expected_prev !== last_hassetnum_exp) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hassetnum :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hassetnum_expected_prev);
		$display ("     Real value = %b", hassetnum_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_hassetnum_exp = hassetnum_expected_prev;
	end
	if (
		( pt_expected_prev[0] !== 1'bx ) && ( pt_prev[0] !== pt_expected_prev[0] )
		&& ((pt_expected_prev[0] !== last_pt_exp[0]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pt[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pt_expected_prev);
		$display ("     Real value = %b", pt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_pt_exp[0] = pt_expected_prev[0];
	end
	if (
		( pt_expected_prev[1] !== 1'bx ) && ( pt_prev[1] !== pt_expected_prev[1] )
		&& ((pt_expected_prev[1] !== last_pt_exp[1]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pt[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pt_expected_prev);
		$display ("     Real value = %b", pt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_pt_exp[1] = pt_expected_prev[1];
	end
	if (
		( pt_expected_prev[2] !== 1'bx ) && ( pt_prev[2] !== pt_expected_prev[2] )
		&& ((pt_expected_prev[2] !== last_pt_exp[2]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pt[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pt_expected_prev);
		$display ("     Real value = %b", pt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_pt_exp[2] = pt_expected_prev[2];
	end
	if (
		( sel_expected_prev[0] !== 1'bx ) && ( sel_prev[0] !== sel_expected_prev[0] )
		&& ((sel_expected_prev[0] !== last_sel_exp[0]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sel[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sel_expected_prev);
		$display ("     Real value = %b", sel_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_sel_exp[0] = sel_expected_prev[0];
	end
	if (
		( sel_expected_prev[1] !== 1'bx ) && ( sel_prev[1] !== sel_expected_prev[1] )
		&& ((sel_expected_prev[1] !== last_sel_exp[1]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sel[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sel_expected_prev);
		$display ("     Real value = %b", sel_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_sel_exp[1] = sel_expected_prev[1];
	end
	if (
		( sel_expected_prev[2] !== 1'bx ) && ( sel_prev[2] !== sel_expected_prev[2] )
		&& ((sel_expected_prev[2] !== last_sel_exp[2]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sel[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sel_expected_prev);
		$display ("     Real value = %b", sel_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_sel_exp[2] = sel_expected_prev[2];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module exp3_2_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [3:0] KEY_R;
reg clk;
reg clr;
reg flag1;
reg flag2;
// wires                                               
wire [3:0] KEY_C;
wire [31:0] N;
wire [7:0] a;
wire [16:0] ans;
wire [7:0] b;
wire [7:0] c;
wire [7:0] codeout;
wire [3:0] cr_reg;
wire flag3;
wire hassetnum;
wire [2:0] pt;
wire [2:0] sel;

wire sampler;                             

// assign statements (if any)                          
exp3_2 i1 (
// port map - connection between master ports and signals/registers   
	.KEY_C(KEY_C),
	.KEY_R(KEY_R),
	.N(N),
	.a(a),
	.ans(ans),
	.b(b),
	.c(c),
	.clk(clk),
	.clr(clr),
	.codeout(codeout),
	.cr_reg(cr_reg),
	.flag1(flag1),
	.flag2(flag2),
	.flag3(flag3),
	.hassetnum(hassetnum),
	.pt(pt),
	.sel(sel)
);

// clk
initial
begin
	repeat(12)
	begin
		clk = 1'b0;
		clk = #40000 1'b1;
		# 40000;
	end
	clk = 1'b0;
end 
// KEY_R[ 3 ]
initial
begin
	KEY_R[3] = 1'b1;
	KEY_R[3] = #260000 1'b0;
	KEY_R[3] = #50000 1'b1;
end 
// KEY_R[ 2 ]
initial
begin
	KEY_R[2] = 1'b1;
	KEY_R[2] = #180000 1'b0;
	KEY_R[2] = #40000 1'b1;
end 
// KEY_R[ 1 ]
initial
begin
	KEY_R[1] = 1'b1;
	KEY_R[1] = #100000 1'b0;
	KEY_R[1] = #40000 1'b1;
end 
// KEY_R[ 0 ]
initial
begin
	KEY_R[0] = 1'b1;
	KEY_R[0] = #20000 1'b0;
	KEY_R[0] = #50000 1'b1;
end 

// clr
initial
begin
	clr = 1'b0;
end 

// flag1
initial
begin
	flag1 = 1'b0;
end 

// flag2
initial
begin
	flag2 = 1'b0;
end 

exp3_2_vlg_sample_tst tb_sample (
	.KEY_R(KEY_R),
	.clk(clk),
	.clr(clr),
	.flag1(flag1),
	.flag2(flag2),
	.sampler_tx(sampler)
);

exp3_2_vlg_check_tst tb_out(
	.KEY_C(KEY_C),
	.N(N),
	.a(a),
	.ans(ans),
	.b(b),
	.c(c),
	.codeout(codeout),
	.cr_reg(cr_reg),
	.flag3(flag3),
	.hassetnum(hassetnum),
	.pt(pt),
	.sel(sel),
	.sampler_rx(sampler)
);
endmodule

